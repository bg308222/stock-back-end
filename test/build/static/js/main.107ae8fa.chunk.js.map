{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["MethodEnum","PriceTypeEnum","TimeRestrictiomEnum","host","sendOrder","body","a","axios","post","investorId","stockId","getDisplay","get","params","page","getTickRange","closedPrice","App","useState","ROD","timeRestriction","setTimeRestriction","quantity","setQuantity","displayData","setDisplayData","tickRange","setTickRange","useEffect","setInterval","then","data","content","detail","length","className","style","width","position","height","background","top","display","justifyContent","alignItems","type","name","id","value","onChange","target","IOC","FOK","flexDirection","padding","b","l","map","index","flex","textAlign","onClick","method","price","priceType","MARKET","borderLeft","order","marketBuyQuantity","borderRight","marketSellQuantity","buyQuantity","sellQuantity","matchPrice","LIMIT","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.107ae8fa.chunk.js","sourcesContent":["import \"./App.scss\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nexport enum MethodEnum {\n  BUY = 0,\n  SELL = 1,\n  CANCEL = 2,\n  UPDATE = 3,\n}\n\nexport enum PriceTypeEnum {\n  MARKET = 0,\n  LIMIT = 1,\n}\n\nexport enum TimeRestrictiomEnum {\n  ROD = 0,\n  IOC = 1,\n  FOK = 2,\n}\n\n// const host = \"http://localhost:8080/\";\nconst host = \"http://220.141.189.242:8080/\";\n\ninterface IOrderBody {\n  investorId: number;\n  stockId: number;\n  method: MethodEnum;\n  price: number;\n  quantity: number;\n  priceType: PriceTypeEnum;\n  timeRestriction: TimeRestrictiomEnum;\n}\n\nconst sendOrder = async (body: Omit<IOrderBody, \"investorId\" | \"stockId\">) => {\n  return axios.post(host + \"api/order\", {\n    ...body,\n    investorId: 1,\n    stockId: 1,\n  });\n};\n\ninterface ITickRange {\n  price: number;\n  buyQuantity: number;\n  sellQuantity: number;\n}\nconst getDisplay = async () => {\n  return axios.get<{\n    content: {\n      createdTime: string;\n      firstOrderBuyPrice: number;\n      firstOrderSellPrice: number;\n      id: number;\n      matchPrice: number;\n      matchQuantity: number;\n      marketBuyQuantity: number;\n      marketSellQuantity: number;\n      stockId: number;\n      tickRange: ITickRange[];\n    }[];\n    totalSize: number;\n  }>(host + \"api/display\", {\n    params: {\n      stockId: 1,\n      page: '{\"page\":1,\"pageSize\":1}',\n    },\n  });\n};\n\nconst getTickRange = async () => {\n  return axios.get<ITickRange[]>(host + \"api/display/tickRange\", {\n    params: { closedPrice: 100 },\n  });\n};\n\nfunction App() {\n  const [timeRestriction, setTimeRestriction] = useState<TimeRestrictiomEnum>(\n    TimeRestrictiomEnum.ROD\n  );\n  const [quantity, setQuantity] = useState(1);\n  const [displayData, setDisplayData] = useState<any>();\n  const [tickRange, setTickRange] = useState<ITickRange[]>();\n  useEffect(() => {\n    setInterval(async () => {\n      await getDisplay().then(\n        async ({\n          data: {\n            content: [detail],\n          },\n        }) => {\n          if (detail && detail.tickRange.length !== 0) {\n            setTickRange(detail.tickRange);\n          } else {\n            await getTickRange().then(({ data }) => {\n              setTickRange(data);\n            });\n          }\n          setDisplayData(detail);\n        }\n      );\n    }, 100);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          width: \"100%\",\n          position: \"sticky\",\n          height: \"70px\",\n          background: \"green\",\n          top: \"0px\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <input\n          type=\"number\"\n          name=\"quantity\"\n          id=\"quantity\"\n          value={quantity}\n          onChange={({ target: { value } }) => {\n            setQuantity(+value);\n          }}\n        />\n        <select\n          name=\"timeRestriction\"\n          id=\"timeRestriction\"\n          value={timeRestriction}\n          onChange={({ target: { value } }) => {\n            setTimeRestriction(+value as unknown as TimeRestrictiomEnum);\n          }}\n        >\n          <option value={TimeRestrictiomEnum.ROD}>ROD</option>\n          <option value={TimeRestrictiomEnum.IOC}>IOC</option>\n          <option value={TimeRestrictiomEnum.FOK}>FOK</option>\n        </select>\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"row\", padding: \"40px\" }}>\n        {[\n          { b: \"BUY\", l: \"buy\" },\n          { b: \"SELL\", l: \"sell\" },\n        ].map(({ b, l }, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                flex: 1,\n              }}\n            >\n              <button\n                style={{\n                  flex: 1,\n                  background: \"red\",\n                  textAlign: \"center\",\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  position: \"sticky\",\n                  top: \"70px\",\n                }}\n                className=\"market\"\n                onClick={async () => {\n                  await sendOrder({\n                    method: MethodEnum[b as any] as unknown as MethodEnum,\n                    price: 0,\n                    quantity,\n                    priceType: PriceTypeEnum.MARKET,\n                    timeRestriction,\n                  });\n                }}\n              >\n                {l === \"buy\" ? (\n                  <div\n                    style={{\n                      flex: 1,\n                      borderLeft: \"1px solid black\",\n                      order: 2,\n                    }}\n                  >\n                    {(displayData && displayData.marketBuyQuantity) || 0}\n                  </div>\n                ) : (\n                  <div\n                    style={{\n                      flex: 1,\n                      borderRight: \"1px solid black\",\n                    }}\n                  >\n                    {(displayData && displayData.marketSellQuantity) || 0}\n                  </div>\n                )}\n                <div style={{ flex: 4 }}>MARKET {b}</div>\n              </button>\n              {tickRange &&\n                tickRange.map(({ price, buyQuantity, sellQuantity }, index) => {\n                  return (\n                    <button\n                      key={index}\n                      className={\n                        displayData && displayData.matchPrice === price\n                          ? \"current\"\n                          : \"\"\n                      }\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        flex: 1,\n                      }}\n                      onClick={async () => {\n                        await sendOrder({\n                          method: MethodEnum[b as any] as unknown as MethodEnum,\n                          price,\n                          quantity,\n                          priceType: PriceTypeEnum.LIMIT,\n                          timeRestriction,\n                        });\n                      }}\n                    >\n                      {l === \"buy\" ? (\n                        <div\n                          style={{\n                            flex: 1,\n                            borderLeft: \"1px solid black\",\n                            order: 2,\n                          }}\n                        >\n                          {buyQuantity}\n                        </div>\n                      ) : (\n                        <div\n                          style={{\n                            flex: 1,\n                            borderRight: \"1px solid black\",\n                          }}\n                        >\n                          {sellQuantity}\n                        </div>\n                      )}\n                      <div style={{ flex: 4 }}>{price}</div>\n                    </button>\n                  );\n                })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}